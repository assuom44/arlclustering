> g <- arlc_get_network_dataset("./inst/extdata/lesmiserables.gml", "LesMiserables Network")
> trx <- arlc_gen_transactions(g$graph)
> params <- arlc_get_apriori_thresholds(trx, supportRange = seq(0.05, 0.06, by = 0.01), confidenceRange = seq(0.5, 0.9, by = 0.1))
> grossRules <- arlc_gen_gross_rules(trx, minSupp = params$minSupp, minConf = params$minConf, minLenRules = 1, maxLenRules = params$lenRules)
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen maxlen target  ext
        0.5    0.1    1 none FALSE            TRUE       5    0.05      1  65971  rules TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 3

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[77 item(s), 63 transaction(s)] done [0.00s].
sorting and recoding items ... [37 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 4 5 6 7 8 9 10 11 12 13 done [0.01s].
writing ... [67009 rule(s)] done [0.09s].
creating S4 object  ... done [0.02s].
> NonRedRules <- arlc_get_NonR_rules (grossRules$GrossRules)
> NonRSigRules <- arlc_get_significant_rules (trx, NonRedRules$nonRR_rules)
Significant filter returns null rule set. The Redandunt rule set is then returned.
> cleanedRules <- arlc_clean_final_rules (NonRSigRules$sigR_nnRR_Rules)
> c <- arlc_generate_clusters (cleanedRules)
> arlc_clusters_plot(g$graph, g$graphLabel, c$Clusters)
Total Identified Clusters:  5
 =========================
  Set  1 : 12 24 25 26 27 28 29 30 32 42 44 49 50 52 55 56 58 59 60 62 63 64 65 66 69 70 71 72 73 76
  Set  2 : 25 26 27 28 42 43 49 56 69 70 71 72 76
  Set  3 : 26 27 28 42 43 49 56 59 69 70 71 72 76
  Set  4 : 42 43 49 56 58 63 69 70 71 72 76
  Set  5 : 49 56 58 59 60 61 62 63 64 65 66 67 69 70 71 72 76 77
 =========================
